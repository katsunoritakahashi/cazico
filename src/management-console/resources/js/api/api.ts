/* tslint:disable */
/* eslint-disable */
/**
 * magnolia-api.v1.yaml
 * Magnolia api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 市区町村一覧
 * @export
 * @interface CitiesResponse
 */
export interface CitiesResponse {
    /**
     * 
     * @type {Array<City>}
     * @memberof CitiesResponse
     */
    data: Array<City>;
}
/**
 * 市区町村
 * @export
 * @interface City
 */
export interface City {
    /**
     * 
     * @type {number}
     * @memberof City
     */
    id?: number;
    /**
     * 市区町村名
     * @type {string}
     * @memberof City
     */
    name?: string;
    /**
     * 所属する都道府県ID
     * @type {number}
     * @memberof City
     */
    prefectureId?: number;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    statusCode: number;
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    errorMessage: string;
    /**
     * 
     * @type {{ [key: string]: Array<string>; }}
     * @memberof ErrorResponse
     */
    errorDetails: { [key: string]: Array<string>; };
    /**
     * 
     * @type {number}
     * @memberof ErrorResponse
     */
    errorCode: number;
}
/**
 * プライマリキー
 * @export
 * @interface ID
 */
export interface ID {
    /**
     * 
     * @type {number}
     * @memberof ID
     */
    id?: number;
}
/**
 * 
 * @export
 * @interface InlineResponse401
 */
export interface InlineResponse401 {
    /**
     * 
     * @type {number}
     * @memberof InlineResponse401
     */
    code?: number;
}
/**
 * 
 * @export
 * @interface LoginPostRequest
 */
export interface LoginPostRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginPostRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof LoginPostRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface LoginPostResponse
 */
export interface LoginPostResponse {
    /**
     * 
     * @type {LoginPostResponseData}
     * @memberof LoginPostResponse
     */
    data: LoginPostResponseData;
}
/**
 * 
 * @export
 * @interface LoginPostResponseData
 */
export interface LoginPostResponseData {
    /**
     * 
     * @type {string}
     * @memberof LoginPostResponseData
     */
    accessToken: string;
    /**
     * 
     * @type {number}
     * @memberof LoginPostResponseData
     */
    expiresIn: number;
    /**
     * 
     * @type {Operator}
     * @memberof LoginPostResponseData
     */
    operator: Operator;
}
/**
 * 
 * @export
 * @interface MastersResponse
 */
export interface MastersResponse {
    /**
     * 
     * @type {Array<Prefecture>}
     * @memberof MastersResponse
     */
    prefectures: Array<Prefecture>;
    /**
     * 
     * @type {Array<City>}
     * @memberof MastersResponse
     */
    cities: Array<City>;
}
/**
 * 
 * @export
 * @interface MeUpdateRequest
 */
export interface MeUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof MeUpdateRequest
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateRequest
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateRequest
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateRequest
     */
    newPassword?: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface MeUpdateResponse
 */
export interface MeUpdateResponse {
    /**
     * 
     * @type {MeUpdateResponseData}
     * @memberof MeUpdateResponse
     */
    data: MeUpdateResponseData;
}
/**
 * 
 * @export
 * @interface MeUpdateResponseData
 */
export interface MeUpdateResponseData {
    /**
     * 
     * @type {number}
     * @memberof MeUpdateResponseData
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateResponseData
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateResponseData
     */
    displayName?: string;
    /**
     * 
     * @type {string}
     * @memberof MeUpdateResponseData
     */
    name?: string;
}
/**
 * 一覧取得系apiのページ情報
 * @export
 * @interface Meta
 */
export interface Meta {
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    to: number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    from: number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    lastPage: number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    currentPage: number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    perPage: number;
    /**
     * 
     * @type {number}
     * @memberof Meta
     */
    total: number;
}
/**
 * 
 * @export
 * @interface Operator
 */
export interface Operator {
    /**
     * 
     * @type {number}
     * @memberof Operator
     */
    id: number;
    /**
     * 
     * @type {Array<OperatorImmutableOperatorSalons>}
     * @memberof Operator
     */
    operatorSalons?: Array<OperatorImmutableOperatorSalons>;
    /**
     * 
     * @type {string}
     * @memberof Operator
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Operator
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof Operator
     */
    displayName: string;
    /**
     * 
     * @type {boolean}
     * @memberof Operator
     */
    locked: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Operator
     */
    canOperatorRead: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Operator
     */
    canOperatorExport: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Operator
     */
    canOperatorUpdate: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof Operator
     */
    canOperatorDelete: boolean;
}
/**
 * 登録パスワード
 * @export
 * @interface OperatorCreatePassword
 */
export interface OperatorCreatePassword {
    /**
     * 
     * @type {string}
     * @memberof OperatorCreatePassword
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface OperatorCreateRequest
 */
export interface OperatorCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof OperatorCreateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorCreateRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorCreateRequest
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorCreateRequest
     */
    locked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorCreateRequest
     */
    canOperatorRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorCreateRequest
     */
    canOperatorExport?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorCreateRequest
     */
    canOperatorUpdate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorCreateRequest
     */
    canOperatorDelete?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OperatorCreateRequest
     */
    password?: string;
}
/**
 * 
 * @export
 * @interface OperatorImmutable
 */
export interface OperatorImmutable {
    /**
     * 
     * @type {Array<OperatorImmutableOperatorSalons>}
     * @memberof OperatorImmutable
     */
    operatorSalons?: Array<OperatorImmutableOperatorSalons>;
}
/**
 * 
 * @export
 * @interface OperatorImmutableOperatorSalons
 */
export interface OperatorImmutableOperatorSalons {
    /**
     * 
     * @type {number}
     * @memberof OperatorImmutableOperatorSalons
     */
    operatorId?: number;
    /**
     * 
     * @type {number}
     * @memberof OperatorImmutableOperatorSalons
     */
    salonId?: number;
}
/**
 * 
 * @export
 * @interface OperatorIndexAllResponse
 */
export interface OperatorIndexAllResponse {
    /**
     * 
     * @type {Array<OperatorSummary>}
     * @memberof OperatorIndexAllResponse
     */
    data: Array<OperatorSummary>;
}
/**
 * 
 * @export
 * @interface OperatorIndexResponse
 */
export interface OperatorIndexResponse {
    /**
     * 
     * @type {Array<OperatorSummary>}
     * @memberof OperatorIndexResponse
     */
    data: Array<OperatorSummary>;
    /**
     * 
     * @type {Meta}
     * @memberof OperatorIndexResponse
     */
    meta: Meta;
}
/**
 * 
 * @export
 * @interface OperatorMutable
 */
export interface OperatorMutable {
    /**
     * 
     * @type {string}
     * @memberof OperatorMutable
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorMutable
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorMutable
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorMutable
     */
    locked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorMutable
     */
    canOperatorRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorMutable
     */
    canOperatorExport?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorMutable
     */
    canOperatorUpdate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorMutable
     */
    canOperatorDelete?: boolean;
}
/**
 * 
 * @export
 * @interface OperatorResetPasswordResponse
 */
export interface OperatorResetPasswordResponse {
    /**
     * 
     * @type {number}
     * @memberof OperatorResetPasswordResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OperatorResetPasswordResponse
     */
    newPassword: string;
}
/**
 * 
 * @export
 * @interface OperatorResponse
 */
export interface OperatorResponse {
    /**
     * 
     * @type {Operator}
     * @memberof OperatorResponse
     */
    data: Operator;
}
/**
 * 
 * @export
 * @interface OperatorSummary
 */
export interface OperatorSummary {
    /**
     * 
     * @type {number}
     * @memberof OperatorSummary
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OperatorSummary
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorSummary
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorSummary
     */
    displayName: string;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorSummary
     */
    locked: boolean;
}
/**
 * 
 * @export
 * @interface OperatorUpdateRequest
 */
export interface OperatorUpdateRequest {
    /**
     * 
     * @type {number}
     * @memberof OperatorUpdateRequest
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof OperatorUpdateRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorUpdateRequest
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof OperatorUpdateRequest
     */
    displayName?: string;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorUpdateRequest
     */
    locked?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorUpdateRequest
     */
    canOperatorRead?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorUpdateRequest
     */
    canOperatorExport?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorUpdateRequest
     */
    canOperatorUpdate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OperatorUpdateRequest
     */
    canOperatorDelete?: boolean;
}
/**
 * 都道府県
 * @export
 * @interface Prefecture
 */
export interface Prefecture {
    /**
     * 
     * @type {number}
     * @memberof Prefecture
     */
    id?: number;
    /**
     * 
     * @type {string}
     * @memberof Prefecture
     */
    name?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary オペレータ新規作成
         * @param {OperatorCreateRequest} [operatorCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator: async (operatorCreateRequest?: OperatorCreateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/operators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof operatorCreateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(operatorCreateRequest !== undefined ? operatorCreateRequest : {}) : (operatorCreateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ削除
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorsId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling deleteOperatorsId.');
            }
            const localVarPath = `/operators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 市区町村一覧取得
         * @param {number} prefectureId 都道府県ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities: async (prefectureId: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'prefectureId' is not null or undefined
            if (prefectureId === null || prefectureId === undefined) {
                throw new RequiredError('prefectureId','Required parameter prefectureId was null or undefined when calling getCities.');
            }
            const localVarPath = `/masters/cities/{prefectureId}`
                .replace(`{${"prefectureId"}}`, encodeURIComponent(String(prefectureId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary マスタ系テーブルデータ全取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasters: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/masters`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 自アカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ一覧取得
         * @param {number} page ページ番号
         * @param {number} [perPage] 取得件数
         * @param {number} [id] ID
         * @param {string} [name] 名前
         * @param {string} [displayName] チャット表示名
         * @param {string} [email] メールアドレス
         * @param {string} [createdAt] 登録日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperators: async (page: number, perPage?: number, id?: number, name?: string, displayName?: string, email?: string, createdAt?: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'page' is not null or undefined
            if (page === null || page === undefined) {
                throw new RequiredError('page','Required parameter page was null or undefined when calling getOperators.');
            }
            const localVarPath = `/operators`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (perPage !== undefined) {
                localVarQueryParameter['perPage'] = perPage;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (name !== undefined) {
                localVarQueryParameter['name'] = name;
            }

            if (displayName !== undefined) {
                localVarQueryParameter['displayName'] = displayName;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (createdAt !== undefined) {
                localVarQueryParameter['createdAt'] = createdAt;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ全件取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/operators/all`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ取得
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsId: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling getOperatorsId.');
            }
            const localVarPath = `/operators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ パスワードリセット
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        operatorsIdResetPassword: async (id: number, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling operatorsIdResetPassword.');
            }
            const localVarPath = `/operators/{id}/resetPassword`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginPostRequest} [loginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin: async (loginPostRequest?: LoginPostRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof loginPostRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(loginPostRequest !== undefined ? loginPostRequest : {}) : (loginPostRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/logout`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMe: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ マイメニュー
         * @param {MeUpdateRequest} [meUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMe: async (meUpdateRequest?: MeUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/me`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof meUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(meUpdateRequest !== undefined ? meUpdateRequest : {}) : (meUpdateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary オペレータ更新
         * @param {number} id オペレータID
         * @param {OperatorUpdateRequest} [operatorUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOperatorsId: async (id: number, operatorUpdateRequest?: OperatorUpdateRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            if (id === null || id === undefined) {
                throw new RequiredError('id','Required parameter id was null or undefined when calling putOperatorsId.');
            }
            const localVarPath = `/operators/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            if (configuration && configuration.accessToken) {
                const accessToken = typeof configuration.accessToken === 'function'
                    ? configuration.accessToken()
                    : configuration.accessToken;
                localVarHeaderParameter["Authorization"] = "Bearer " + accessToken;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            const needsSerialization = (typeof operatorUpdateRequest !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(operatorUpdateRequest !== undefined ? operatorUpdateRequest : {}) : (operatorUpdateRequest || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @summary オペレータ新規作成
         * @param {OperatorCreateRequest} [operatorCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createOperator(operatorCreateRequest?: OperatorCreateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).createOperator(operatorCreateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ削除
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteOperatorsId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).deleteOperatorsId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 市区町村一覧取得
         * @param {number} prefectureId 都道府県ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getCities(prefectureId: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<CitiesResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getCities(prefectureId, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary マスタ系テーブルデータ全取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMasters(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MastersResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMasters(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 自アカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Operator>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ一覧取得
         * @param {number} page ページ番号
         * @param {number} [perPage] 取得件数
         * @param {number} [id] ID
         * @param {string} [name] 名前
         * @param {string} [displayName] チャット表示名
         * @param {string} [email] メールアドレス
         * @param {string} [createdAt] 登録日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperators(page: number, perPage?: number, id?: number, name?: string, displayName?: string, email?: string, createdAt?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorIndexResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getOperators(page, perPage, id, name, displayName, email, createdAt, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ全件取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorsAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorIndexAllResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getOperatorsAll(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ取得
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getOperatorsId(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).getOperatorsId(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ パスワードリセット
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async operatorsIdResetPassword(id: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorResetPasswordResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).operatorsIdResetPassword(id, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Login
         * @param {LoginPostRequest} [loginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogin(loginPostRequest?: LoginPostRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<LoginPostResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLogin(loginPostRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postLogout(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postLogout(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postMe(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).postMe(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ マイメニュー
         * @param {MeUpdateRequest} [meUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putMe(meUpdateRequest?: MeUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<MeUpdateResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putMe(meUpdateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary オペレータ更新
         * @param {number} id オペレータID
         * @param {OperatorUpdateRequest} [operatorUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async putOperatorsId(id: number, operatorUpdateRequest?: OperatorUpdateRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OperatorResponse>> {
            const localVarAxiosArgs = await DefaultApiAxiosParamCreator(configuration).putOperatorsId(id, operatorUpdateRequest, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @summary オペレータ新規作成
         * @param {OperatorCreateRequest} [operatorCreateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createOperator(operatorCreateRequest?: OperatorCreateRequest, options?: any): AxiosPromise<OperatorResponse> {
            return DefaultApiFp(configuration).createOperator(operatorCreateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ削除
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteOperatorsId(id: number, options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).deleteOperatorsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 市区町村一覧取得
         * @param {number} prefectureId 都道府県ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getCities(prefectureId: number, options?: any): AxiosPromise<CitiesResponse> {
            return DefaultApiFp(configuration).getCities(prefectureId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary マスタ系テーブルデータ全取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMasters(options?: any): AxiosPromise<MastersResponse> {
            return DefaultApiFp(configuration).getMasters(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 自アカウント情報取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getMe(options?: any): AxiosPromise<Operator> {
            return DefaultApiFp(configuration).getMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ一覧取得
         * @param {number} page ページ番号
         * @param {number} [perPage] 取得件数
         * @param {number} [id] ID
         * @param {string} [name] 名前
         * @param {string} [displayName] チャット表示名
         * @param {string} [email] メールアドレス
         * @param {string} [createdAt] 登録日
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperators(page: number, perPage?: number, id?: number, name?: string, displayName?: string, email?: string, createdAt?: string, options?: any): AxiosPromise<OperatorIndexResponse> {
            return DefaultApiFp(configuration).getOperators(page, perPage, id, name, displayName, email, createdAt, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ全件取得
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsAll(options?: any): AxiosPromise<OperatorIndexAllResponse> {
            return DefaultApiFp(configuration).getOperatorsAll(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ取得
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getOperatorsId(id: number, options?: any): AxiosPromise<OperatorResponse> {
            return DefaultApiFp(configuration).getOperatorsId(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ パスワードリセット
         * @param {number} id オペレータID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        operatorsIdResetPassword(id: number, options?: any): AxiosPromise<OperatorResetPasswordResponse> {
            return DefaultApiFp(configuration).operatorsIdResetPassword(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login
         * @param {LoginPostRequest} [loginPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogin(loginPostRequest?: LoginPostRequest, options?: any): AxiosPromise<LoginPostResponse> {
            return DefaultApiFp(configuration).postLogin(loginPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Logout
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postLogout(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postLogout(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postMe(options?: any): AxiosPromise<void> {
            return DefaultApiFp(configuration).postMe(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ マイメニュー
         * @param {MeUpdateRequest} [meUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putMe(meUpdateRequest?: MeUpdateRequest, options?: any): AxiosPromise<MeUpdateResponse> {
            return DefaultApiFp(configuration).putMe(meUpdateRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary オペレータ更新
         * @param {number} id オペレータID
         * @param {OperatorUpdateRequest} [operatorUpdateRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        putOperatorsId(id: number, operatorUpdateRequest?: OperatorUpdateRequest, options?: any): AxiosPromise<OperatorResponse> {
            return DefaultApiFp(configuration).putOperatorsId(id, operatorUpdateRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary オペレータ新規作成
     * @param {OperatorCreateRequest} [operatorCreateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createOperator(operatorCreateRequest?: OperatorCreateRequest, options?: any) {
        return DefaultApiFp(this.configuration).createOperator(operatorCreateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ削除
     * @param {number} id オペレータID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteOperatorsId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).deleteOperatorsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 市区町村一覧取得
     * @param {number} prefectureId 都道府県ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getCities(prefectureId: number, options?: any) {
        return DefaultApiFp(this.configuration).getCities(prefectureId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary マスタ系テーブルデータ全取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMasters(options?: any) {
        return DefaultApiFp(this.configuration).getMasters(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 自アカウント情報取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getMe(options?: any) {
        return DefaultApiFp(this.configuration).getMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ一覧取得
     * @param {number} page ページ番号
     * @param {number} [perPage] 取得件数
     * @param {number} [id] ID
     * @param {string} [name] 名前
     * @param {string} [displayName] チャット表示名
     * @param {string} [email] メールアドレス
     * @param {string} [createdAt] 登録日
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOperators(page: number, perPage?: number, id?: number, name?: string, displayName?: string, email?: string, createdAt?: string, options?: any) {
        return DefaultApiFp(this.configuration).getOperators(page, perPage, id, name, displayName, email, createdAt, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ全件取得
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOperatorsAll(options?: any) {
        return DefaultApiFp(this.configuration).getOperatorsAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ取得
     * @param {number} id オペレータID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getOperatorsId(id: number, options?: any) {
        return DefaultApiFp(this.configuration).getOperatorsId(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ パスワードリセット
     * @param {number} id オペレータID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public operatorsIdResetPassword(id: number, options?: any) {
        return DefaultApiFp(this.configuration).operatorsIdResetPassword(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login
     * @param {LoginPostRequest} [loginPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogin(loginPostRequest?: LoginPostRequest, options?: any) {
        return DefaultApiFp(this.configuration).postLogin(loginPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Logout
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postLogout(options?: any) {
        return DefaultApiFp(this.configuration).postLogout(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public postMe(options?: any) {
        return DefaultApiFp(this.configuration).postMe(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ マイメニュー
     * @param {MeUpdateRequest} [meUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putMe(meUpdateRequest?: MeUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).putMe(meUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary オペレータ更新
     * @param {number} id オペレータID
     * @param {OperatorUpdateRequest} [operatorUpdateRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public putOperatorsId(id: number, operatorUpdateRequest?: OperatorUpdateRequest, options?: any) {
        return DefaultApiFp(this.configuration).putOperatorsId(id, operatorUpdateRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


